Given an input string (s) and a pattern (p), implement regular expression matching with support for '.' and '*' where: 

'.' Matches any single character.​​​​
'*' Matches zero or more of the preceding element.
The matching should cover the entire input string (not partial).

 

Example 1:

Input: s = "aa", p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".
Example 2:

Input: s = "aa", p = "a*"
Output: true
Explanation: '*' means zero or more of the preceding element, 'a'. Therefore, by repeating 'a' once, it becomes "aa".
Example 3:

Input: s = "ab", p = ".*"
Output: true
Explanation: ".*" means "zero or more (*) of any character (.)".

-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
public class Solution {
    public bool IsMatch(string s, string p) {
        
        var dpTable = new bool[s.Length+1, p.Length+1];
        dpTable[0,0] = true;
        
        for (int i = 1; i < p.Length; i+= 2)
        {
            if (p[i] != '*')
                break;
            
            dpTable[0, i+1] = true;
        }
        
        for (int i = 0; i < s.Length; i++)
        {
            for (int j = 0; j < p.Length; j++)
            {
                if (s[i] == p[j] || p[j] == '.')
                {
                    dpTable[i+1,j+1] = dpTable[i,j];
                }
                else if (p[j] == '*')
                {
                    if (p[j-1] == s[i] || p[j-1] == '.')
                    {
                        dpTable[i+1,j+1] = dpTable[i, j+1] || dpTable[i+1, j-1];
                    }
                    else
                    {
                        dpTable[i+1, j+1] = dpTable[i+1, j-1];
                    }
                }
            }
        }
        
        return dpTable[s.Length, p.Length];        
    }
}
